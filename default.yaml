# Rime default settings
# encoding: utf-8

# 要比共享目录的同名文件的 config_version 大才可以生效
config_version: "2025-04-21"

schema_list:
  - schema: rime_frost       # 白霜拼音（全拼）
  - schema: rime_frost_flypy # 小鹤双拼
  - schema: japanese         # 日本语

# 菜单
menu:
  page_size: 6 # 候选词个数
  # 修改候选项标签
  # alternative_select_labels: [ ①, ②, ③, ④, ⑤, ⑥, ⑦, ⑧, ⑨, ⑩ ]
  alternative_select_labels: [ 〡, 〢, 〣, 〤, 〥, 〦, 〧, 〨, 〩, 〇 ]
  # alternative_select_labels: [ ㈠, ㈡, ㈢, ㈣, ㈤, ㈥, ㈦, ㈧, ㈨, ㈩ ]
  # alternative_select_labels: [ 🀇, 🀈, 🀉, 🀊, 🀋, 🀌, 🀍, 🀎, 🀏, 🀄 ]
  # alternative_select_labels: [ Ⅰ, Ⅱ, Ⅲ, Ⅳ, Ⅴ, Ⅵ, Ⅶ, Ⅷ, Ⅸ, Ⅹ ]
  # alternative_select_labels: [ ⅰ, ⅱ, ⅲ, ⅳ, ⅴ, ⅵ, ⅶ, ⅷ, ⅸ, ⅹ ]

  # 如编码字符占用数字键，则需另设选字键
  # alternative_select_keys: ASDFGHJKL

# 方案选单相关
switcher:
  caption: 「方案选单」
  hotkeys:
    - Control+grave
    - Control+Shift+grave
  save_options: # 开关记忆（方案中的 switches），从方案选单（而非快捷键）切换时会记住的选项，需要记忆的开关不能设定 reset
    - ascii_punct
    - traditionalization
    - emoji
    - full_shape
  fold_options: true                     # 呼出时是否折叠，多方案时建议折叠 true ，一个方案建议展开 false
  abbreviate_options: true               # 折叠时是否缩写选项
  option_list_separator: "\u2005/\u2005" # 折叠时的选项分隔符

# 中西文切换
#
# good_old_caps_lock:
# true   切换大写
# false  切换中英
# macOS 偏好设置的优先级更高，如果勾选【使用大写锁定键切换“ABC”输入法】则始终会切换输入法。
#
# 切换中英：
# 不同的选项表示：打字打到一半时按下了 CapsLock、Shift、Control 后：
# commit_code  上屏原始的编码，然后切换到英文
# commit_text  上屏拼出的词句，然后切换到英文
# clear        清除未上屏内容，然后切换到英文
# inline_ascii 切换到临时英文模式，按回车上屏后回到中文状态
# noop         屏蔽快捷键，不切换中英，但不要屏蔽 CapsLock
ascii_composer:
  good_old_caps_lock: true # true | false
  switch_key:
    Caps_Lock: clear        # commit_code | commit_text | clear
    Shift_L: commit_code    # commit_code | commit_text | inline_ascii | clear | noop
    Shift_R: noop           # commit_code | commit_text | inline_ascii | clear | noop
    Control_L: noop         # commit_code | commit_text | inline_ascii | clear | noop
    Control_R: noop         # commit_code | commit_text | inline_ascii | clear | noop

###################################################################################

translator:
  # 启用自动造词
  enable_encoder: true
  # 启用自动句子输入
  enable_sentence: true
  # 启用用户词典
  enable_user_dict: true
  # 对已上屏的词语进行自动编码以提高下次输入的命中率
  encode_commit_history: true

# 下面的 punctuator recognizer key_binder 写了一些所有方案通用的配置项。
# 写在 default.yaml 里，方便多个方案引用，就是不用每个方案都写一遍了。

# 标点符号
# 设置为一个映射，就自动上屏；设置为多个映射，如 '/' : [ '/', ÷ ] 则进行复选。
#   full_shape: 全角没改，使用预设值
#   half_shape: 标点符号全部直接上屏，和 macOS 自带输入法的区别是
#              '|' 是半角的，
#              '~' 是半角的，
#              '`'（反引号）没有改成 '·'（间隔号）。
punctuator:
  full_shape:
    " ": { commit: "　" }
    ",": { commit: ， }
    ".": { commit: 。 }
    "<": [《, 〈, «, ‹]
    ">": [》, 〉, », ›]
    "/": [／, ÷]
    "?": { commit: ？ }
    ";": { commit: ； }
    ":": { commit: ： }
    "'": { pair: ["‘", "’"] }
    '"': { pair: ["“", "”"] }
    '\': [、, ＼]
    "|": [·, ｜, "§", "¦"]
    "`": ｀
    "~": ～
    "!": { commit: ！ }
    "@": [＠, ☯]
    "#": [＃, ⌘]
    "%": [％, "°", "℃"]
    "$": [￥, "$", "€", "£", "¥", "¢", "¤"]
    "^": { commit: …… }
    "&": ＆
    "*": [＊, ·, ・, ×, ※, ❂]
    "(": （
    ")": ）
    "-": －
    "_": ——
    "+": ＋
    "=": ＝
    "[": [「, 【, 〔, ［]
    "]": [」, 】, 〕, ］]
    "{": [『, 〖, ｛]
    "}": [』, 〗, ｝]
  half_shape:
    ",": "，"
    ".": "。"
    "<": "《"
    ">": "》"
    "/": [/, ÷]
    "?": "？"
    ";": "；"
    ":": "："
    "'": { pair: ["‘", "’"] }
    '"': { pair: ["“", "”"] }
    '\': "、"
    "|": "|"
    "`": "`"
    "~": "~"
    "!": "！"
    "@": "@"
    "#": "#"
    "%": "%"
    "$": "¥"
    "^": "……"
    "&": "&"
    "*": "*"
    "(": "（"
    ")": "）"
    "-": "-"
    "_": ——
    "+": "+"
    "=": "="
    "[": "【"
    "]": "】"
    "{": "「"
    "}": "」"

# 处理符合特定规则的输入码，如网址、反查
# 此处配置较为通用的选项，各方案中另增加了和方案功能绑定的 patterns。
recognizer:
  patterns:
    email: "^[A-Za-z][-_.0-9A-Za-z]*@.*$" # email @ 之后不上屏
    url: "^(www[.]|https?:|ftp[.:]|mailto:|file:).*$|^[a-z]+[.].+$" # URL
    underscore: "^[A-Za-z]+_.*"  # 下划线不上屏
    # url_2: "^[A-Za-z]+[.].*"   # 句号不上屏，支持 google.com abc.txt 等网址或文件名，使用句号翻页时需要注释掉
    # colon: "^[A-Za-z]+:.*"     # 冒号不上屏

# 快捷键
key_binder:
  bindings:
    # Tab / Shift+Tab 切换光标至下/上一个拼音
    - { when: composing, accept: Shift+Tab, send: Shift+Left }
    - { when: composing, accept: Tab, send: Shift+Right }

    # Tab / Shift+Tab 翻页
    # - { when: has_menu, accept: Shift+Tab, send: Page_Up }
    # - { when: has_menu, accept: Tab, send: Page_Down }

    # Option/Alt + ←/→ 切换光标至下/上一个拼音
    - { when: composing, accept: Alt+Left, send: Shift+Left }
    - { when: composing, accept: Alt+Right, send: Shift+Right }

    # 翻页 - =
    - { when: has_menu, accept: minus, send: Page_Up }
    - { when: has_menu, accept: equal, send: Page_Down }

    # 翻页 , .
    # - { when: paging, accept: comma, send: Page_Up }
    # - { when: has_menu, accept: period, send: Page_Down }

    # 翻页 [ ]
    - { when: paging, accept: bracketleft, send: Page_Up }
    - { when: has_menu, accept: bracketright, send: Page_Down }

    # Emacs 风格的快捷键
    - { when: composing, accept: Control+p, send: Up }
    - { when: composing, accept: Control+n, send: Down }
    - { when: composing, accept: Control+b, send: Left }
    - { when: composing, accept: Control+f, send: Right }
    - { when: composing, accept: Control+a, send: Home }
    - { when: composing, accept: Control+e, send: End }
    - { when: composing, accept: Control+d, send: Delete }
    - { when: composing, accept: Control+k, send: Shift+Delete } # 删除到行尾
    - { when: composing, accept: Control+g, send: Escape }       # 退出编码
    - { when: composing, accept: Alt+v, send: Page_Up }          # 翻页
    - { when: composing, accept: Control+v, send: Page_Down }

    # 切换状态
    - { when: always, accept: Shift+space, toggle: ascii_mode }
    - { when: always, accept: Control+comma, toggle: full_shape }
    - { when: always, accept: Control+period, toggle: ascii_punct }
    - { when: always, accept: Control+slash, toggle: traditionalization }

    # 将小键盘 0~9 . 映射到主键盘，数字金额大写的 Lua 如 R1234.5678 可使用小键盘输入
    - { accept: KP_0, send: 0, when: composing }
    - { accept: KP_1, send: 1, when: composing }
    - { accept: KP_2, send: 2, when: composing }
    - { accept: KP_3, send: 3, when: composing }
    - { accept: KP_4, send: 4, when: composing }
    - { accept: KP_5, send: 5, when: composing }
    - { accept: KP_6, send: 6, when: composing }
    - { accept: KP_7, send: 7, when: composing }
    - { accept: KP_8, send: 8, when: composing }
    - { accept: KP_9, send: 9, when: composing }
    - { accept: KP_Decimal, send: period, when: composing }
